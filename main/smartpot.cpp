#include <stdio.h>
#include <stdlib.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "freertos/event_groups.h"
#include "esp_err.h"
#include "esp_log.h"
#include "esp_sleep.h"
#include "esp_event.h"
#include "ds3231.hpp"
#include "at24cxx.hpp"
#include "smartpot.hpp"
#include "encoder.h"

#define XBM_CURRENT_STATE_WIDTH     (52)
#define XBM_CURRENT_STATE_HEIGHT    (52)
#define XBM_WIFI_WIDTH              (43)
#define XBM_WIFI_HEIGHT             (52)
#define XBM_SETTINGS_WIDTH          (52)
#define XBM_SETTINGS_HEIGHT         (52)

typedef struct
{
    uint16_t width;
    uint16_t height;
    const uint8_t bitmap[];
} xbm_icon_desc_t;

static const char* TAG = "smart-pot";

static xbm_icon_desc_t xbm_current_state = {
    .width = XBM_CURRENT_STATE_WIDTH,
    .height = XBM_CURRENT_STATE_HEIGHT,
    .bitmap = {
        0x00, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
        0xFD, 0x03, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xE0, 0x03, 0x00, 0x00, 0x00, 
        0x00, 0x1E, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x07, 0x00, 
        0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x04, 0x07, 0x00, 0x0E, 0x01, 0x00, 
        0xC0, 0x7F, 0x0F, 0x04, 0xEF, 0x3F, 0x00, 0xF0, 0xFF, 0x0F, 0x07, 0xFF, 
        0x7F, 0x00, 0xF0, 0xFF, 0x0F, 0x0F, 0xFF, 0xFF, 0x01, 0xFC, 0xE0, 0x1F, 
        0x8E, 0x7F, 0xF0, 0x01, 0x3C, 0x80, 0x1F, 0x8F, 0x1F, 0xC0, 0x03, 0x1E, 
        0x00, 0x1E, 0x8F, 0x07, 0x80, 0x07, 0x1E, 0x00, 0x3C, 0xCE, 0x03, 0x80, 
        0x07, 0x0F, 0x00, 0x3C, 0xCF, 0x03, 0x00, 0x0F, 0x0F, 0x00, 0xF8, 0xFF, 
        0x01, 0x00, 0x0F, 0x07, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0x0F, 0x0F, 0x70, 
        0xF0, 0xFF, 0xE0, 0x00, 0x0E, 0x07, 0xF8, 0xFB, 0xFF, 0xFD, 0x01, 0x0F, 
        0x0F, 0xF0, 0x7F, 0xE0, 0xFF, 0x00, 0x0F, 0x0F, 0xE0, 0x7F, 0xC0, 0x7F, 
        0x00, 0x0F, 0x1E, 0x00, 0x3F, 0xC0, 0x0F, 0x80, 0x07, 0x1E, 0x00, 0x3C, 
        0xC0, 0x03, 0x80, 0x07, 0x3C, 0x00, 0x3C, 0xC0, 0x03, 0xC0, 0x03, 0xF8, 
        0x80, 0x3F, 0xC0, 0x0F, 0xF0, 0x01, 0xF8, 0xFF, 0x7F, 0xE0, 0xFF, 0xFF, 
        0x01, 0xF0, 0xFF, 0xFF, 0xF0, 0xFF, 0x7F, 0x00, 0xC0, 0xFF, 0xF1, 0xFF, 
        0xFC, 0x3F, 0x00, 0x00, 0x7E, 0xF0, 0xFF, 0xE0, 0x07, 0x00, 0x00, 0x3F, 
        0xF8, 0xFF, 0xC1, 0x0F, 0x00, 0x00, 0x0F, 0x7C, 0xEF, 0x03, 0x0F, 0x00, 
        0x80, 0x07, 0x3C, 0xCF, 0x03, 0x1E, 0x00, 0x80, 0x07, 0x1E, 0x8F, 0x07, 
        0x1E, 0x00, 0xC0, 0x03, 0x0E, 0x0E, 0x0F, 0x1C, 0x00, 0xC0, 0x03, 0x0F, 
        0x0F, 0x0F, 0x3C, 0x00, 0xC0, 0x01, 0x04, 0x0F, 0x02, 0x3C, 0x00, 0xC0, 
        0x03, 0x00, 0x0F, 0x00, 0x38, 0x00, 0xC0, 0x03, 0x00, 0x0F, 0x00, 0x3C, 
        0x00, 0xC0, 0x03, 0x80, 0x1F, 0x00, 0x3C, 0x00, 0x80, 0x03, 0x80, 0x1F, 
        0x00, 0x1C, 0x00, 0x80, 0x07, 0xC0, 0x3F, 0x00, 0x1E, 0x00, 0x80, 0x0F, 
        0xE0, 0x7F, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0xE0, 0xF9, 0x80, 0x0F, 0x00, 
        0x00, 0x7E, 0xFD, 0xF0, 0xE7, 0x07, 0x00, 0x00, 0xFC, 0x7F, 0xE0, 0xFF, 
        0x03, 0x00, 0x00, 0xF8, 0x3F, 0xC0, 0xFF, 0x01, 0x00, 0x00, 0xE0, 0x0F, 
        0x00, 0x7F, 0x00, 0x00
    }
};
static xbm_icon_desc_t xbm_wifi = {
    .width = XBM_WIFI_WIDTH,
    .height = XBM_WIFI_HEIGHT,
    .bitmap = {
        0x80, 0x01, 0x00, 0x00, 0x0C, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x1E, 0x00, 
        0xE0, 0x03, 0x00, 0x00, 0x3E, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x7C, 0x00, 
        0xF8, 0x60, 0x00, 0x30, 0xF8, 0x00, 0x78, 0x78, 0x00, 0xF0, 0xF0, 0x00, 
        0x7C, 0xF8, 0x00, 0xF8, 0xF0, 0x01, 0x3C, 0x7C, 0x00, 0xF0, 0xE1, 0x03, 
        0x1E, 0x3E, 0x00, 0xE0, 0xC3, 0x03, 0x1E, 0x1E, 0x00, 0xC0, 0xC3, 0x03, 
        0x1F, 0x0F, 0x00, 0xC0, 0x87, 0x03, 0x0E, 0x0F, 0x00, 0x80, 0x87, 0x07, 
        0x0F, 0x0F, 0x00, 0x80, 0x87, 0x07, 0x0F, 0x07, 0x00, 0x00, 0x87, 0x07, 
        0x8F, 0x0F, 0x70, 0x00, 0x8F, 0x07, 0x0F, 0x07, 0x70, 0x80, 0x87, 0x07, 
        0x0F, 0x07, 0xF0, 0x80, 0x87, 0x07, 0x0F, 0x0F, 0x78, 0x80, 0x87, 0x07, 
        0x0F, 0x0F, 0x70, 0x80, 0x87, 0x07, 0x1E, 0x1F, 0xF8, 0xC0, 0xC3, 0x03, 
        0x1E, 0x1E, 0x70, 0xC0, 0xC3, 0x03, 0x1E, 0x3E, 0x70, 0xE0, 0xE3, 0x03, 
        0x3C, 0x7C, 0xF8, 0xF0, 0xE1, 0x01, 0x7C, 0xF8, 0x70, 0xF8, 0xF0, 0x01, 
        0xF8, 0xF0, 0x70, 0x70, 0xF0, 0x00, 0xF0, 0x20, 0xF0, 0x10, 0x7C, 0x00, 
        0xF0, 0x03, 0x78, 0x00, 0x7E, 0x00, 0xE0, 0x03, 0x70, 0x00, 0x3E, 0x00, 
        0xC0, 0x03, 0xF0, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
        0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
        0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
        0x38, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x3C, 0x00, 0x00, 0x00, 0xE0, 0x00, 
        0x38, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xE0, 0x01, 
        0x38, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xE0, 0x01, 
        0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
        0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
    }
};
static xbm_icon_desc_t xbm_settings = {
    .width = XBM_SETTINGS_WIDTH,
    .height = XBM_SETTINGS_HEIGHT,
    .bitmap = {
        0x00, 0x00, 0xC0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
        0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x00, 
        0x1C, 0x70, 0xE0, 0x80, 0x07, 0x00, 0x00, 0x3E, 0x78, 0xE0, 0xE1, 0x07, 
        0x00, 0x00, 0xFF, 0x7E, 0xE0, 0xF7, 0x0F, 0x00, 0x80, 0xF7, 0x3F, 0xC0, 
        0xFF, 0x1E, 0x00, 0xC0, 0xC3, 0x0F, 0x00, 0x3F, 0x3C, 0x00, 0xE0, 0x81, 
        0x03, 0x00, 0x1C, 0x78, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
        0xE0, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 
        0x38, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x80, 0x07, 0xC0, 
        0x3F, 0x00, 0x1E, 0x00, 0x00, 0x07, 0xF0, 0xFF, 0x00, 0x0E, 0x00, 0x80, 
        0x07, 0xF8, 0xFF, 0x01, 0x1E, 0x00, 0x80, 0x03, 0x7C, 0xE0, 0x03, 0x1C, 
        0x00, 0xC0, 0x03, 0x1E, 0x80, 0x07, 0x3C, 0x00, 0xF8, 0x01, 0x0F, 0x00, 
        0x0F, 0xF8, 0x01, 0xFE, 0x01, 0x07, 0x00, 0x0E, 0xF8, 0x07, 0xFF, 0x80, 
        0x07, 0x00, 0x1E, 0xF0, 0x0F, 0x0F, 0x80, 0x03, 0x00, 0x1C, 0x00, 0x0E, 
        0x07, 0x80, 0x03, 0x00, 0x1C, 0x00, 0x0E, 0x07, 0x80, 0x03, 0x00, 0x1C, 
        0x00, 0x0E, 0x07, 0x80, 0x03, 0x00, 0x1C, 0x00, 0x0E, 0x07, 0x80, 0x03, 
        0x00, 0x1C, 0x00, 0x0E, 0x07, 0x80, 0x03, 0x00, 0x1C, 0x00, 0x0E, 0xFF, 
        0x80, 0x07, 0x00, 0x1E, 0xF0, 0x0F, 0xFE, 0x01, 0x07, 0x00, 0x0E, 0xF8, 
        0x07, 0xF8, 0x01, 0x0F, 0x00, 0x0F, 0xF8, 0x02, 0xC0, 0x03, 0x1E, 0x80, 
        0x07, 0x3C, 0x00, 0x80, 0x03, 0x7E, 0xE0, 0x07, 0x1C, 0x00, 0x80, 0x07, 
        0xF8, 0xFF, 0x01, 0x1E, 0x00, 0x00, 0x07, 0xF0, 0xFF, 0x00, 0x0E, 0x00, 
        0x80, 0x07, 0xC0, 0x3F, 0x00, 0x1E, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 
        0x3C, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0xE0, 0x01, 0x00, 
        0x00, 0x00, 0x78, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xE0, 
        0x81, 0x03, 0x00, 0x1C, 0x78, 0x00, 0xC0, 0xC3, 0x0F, 0x00, 0x3F, 0x3C, 
        0x00, 0x80, 0xF7, 0x3F, 0xC0, 0xFF, 0x1E, 0x00, 0x00, 0xFF, 0x7E, 0xE0, 
        0xF7, 0x0F, 0x00, 0x00, 0x7E, 0x78, 0xE0, 0xE0, 0x07, 0x00, 0x00, 0x1E, 
        0x70, 0xE0, 0x80, 0x03, 0x00, 0x00, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
        0x3F, 0x00, 0x00, 0x00,
    }
};
static const xbm_icon_desc_t* icons[] = {
    &xbm_current_state,
    &xbm_wifi,
    &xbm_settings
};



/**
 * 
 * 
 */
SmartPot::SmartPot(u8g2_t* u8g2, Ds3231* rtc, At24cxx* eeprom, Dht* dht)
    : display(u8g2), rtc(rtc), eeprom(eeprom), dht(dht)
{
    _init();
}

SmartPot::~SmartPot()
{

}

void SmartPot::begin(esp_sleep_wakeup_cause_t wakeup_cause)
{
    switch (wakeup_cause)
    {
        case ESP_SLEEP_WAKEUP_EXT0: {
            //main_action = smartpot_try_to_water;
            break;
        }

        case ESP_SLEEP_WAKEUP_EXT1: {
            uint64_t wakeup_pin_mask = esp_sleep_get_ext1_wakeup_status();
            if (0 != wakeup_pin_mask) {
                int pin = __builtin_ffsll(wakeup_pin_mask) - 1;
                ESP_LOGI(TAG, "Wake up from GPIO num %d", pin);
            } else {
                ESP_LOGI(TAG, "Wake up from GPIO");
            }
            //main_action = smartpot_enter_menu;
            break;
        }        

        case ESP_SLEEP_WAKEUP_UNDEFINED:
        default: {
            ESP_LOGI(TAG, "Wake up by undefined cause");
            //main_action = smartpot_nop;
            break;
        }
    }
}

esp_err_t SmartPot::run(QueueHandle_t* queue)
{
    ESP_ERROR_CHECK(esp_event_loop_create_default());

    //uint16_t line_height = u8g2_GetAscent(display) - u8g2_GetDescent(display) + 2;
    //uint16_t top = line_height;

    display->draw_color = 1;
    
    /*u8g2_DrawUTF8(display, 2, top, "Тек. состояние");
    top += line_height;
    u8g2_DrawUTF8(display, 2, top, "Подкл. к WIFI");
    top += line_height;*/


    struct tm time;
    //uint16_t _value = 0;
    char str[64];
    float humidity, temperature;
    rotary_encoder_event_t e;
    int8_t icon_index = 0;

    u8g2_SetBitmapMode(display, 1);

    while(1)
    {
        //sprintf(str, "VAL: %ld", val);
        //u8g2_DrawUTF8(display, 0, line_height, str);
        //u8g2_SendBuffer(display);

        const xbm_icon_desc_t* current_icon = icons[icon_index];
        u8g2_uint_t x = (u8g2_GetDisplayWidth(display) - current_icon->width) / 2;
        u8g2_uint_t y = 2;

        u8g2_DrawXBM(display, x, y, current_icon->width, current_icon->height, current_icon->bitmap);
        u8g2_SendBuffer(display);

        xQueueReceive(*queue, &e, portMAX_DELAY);

        switch(e.type)
        {
            case RE_ET_BTN_PRESSED:
            {
                ESP_LOGI(TAG, "Button pressed");
                break;
            }
            case RE_ET_BTN_RELEASED:
            {
                ESP_LOGI(TAG, "Button released");
                break;
            }
            case RE_ET_BTN_CLICKED:
            {
                ESP_LOGI(TAG, "Button clicked");
                break;
            }
            case RE_ET_BTN_LONG_PRESSED:
            {
                ESP_LOGI(TAG, "Looooong pressed button");
                break;
            }
            case RE_ET_CHANGED:
            {
                icon_index += e.diff;
                
                if (2 < icon_index)
                {
                    icon_index = 0;
                }
                else if (0 > icon_index)
                {
                    icon_index = 2;
                }

                ESP_LOGI(TAG, "Value = %" PRIi8, icon_index);
                break;
            }
            default:
            {
                break;
            }
        }

        ESP_ERROR_CHECK(rtc->get_time(&time));
        strftime(str, sizeof(str), "%c", &time);
        ESP_LOGI(TAG, "DS3231 date/time %s", str);

        esp_err_t result = dht->read_float_data(&humidity, &temperature);
        if (ESP_OK == result)
        {
            ESP_LOGI(TAG, "DHT hum %.1f%% temp %.1fC", humidity, temperature);
        }
        else
        {
            ESP_LOGE(TAG, "Erro reading DHT");
        }

        //sprintf(str, "VAL: %ld", val);
        u8g2_ClearBuffer(display);
        //u8g2_DrawUTF8(display, 0, line_height, str);
        //u8g2_SendBuffer(display);

        //vTaskDelay(pdMS_TO_TICKS(1000));
    }

    return ESP_OK;
}

void SmartPot::handle(int val)
{

}

void SmartPot::_init()
{
    /*icons[0] = new {
        .width = XBM_CURRENT_STATE_WIDTH,
        .height = XBM_CURRENT_STATE_HEIGHT,
        .bits = xbm_current_state_bits
    };
    
    ,
    {
        .width = XBM_WIFI_WIDTH,
        .height = XBM_WIFI_HEIGHT,
    },
    {
        .width = XBM_SETTINGS_WIDTH,
        .height = XBM_SETTINGS_HEIGHT,
    }
};*/
}